{"version":3,"sources":["components/List/List.tsx","App.tsx","index.tsx"],"names":["SortBy","List","goodsList","useState","isReverse","setIsReverse","None","sortBy","setSortBy","wordLength","setWordLength","newGoodsList","filter","word","length","Alphabet","sort","elem1","elem2","localeCompare","Length","reverse","sortType","className","type","classNames","onClick","onChange","event","Number","target","value","Array","from","_","i","map","num","item","goodsFromServer","App","isVisible","setIsVisible","ReactDOM","render","document","getElementById"],"mappings":"kMAQKA,E,+EAAAA,K,gBAAAA,E,oBAAAA,E,SAAAA,M,KAME,IAAMC,EAAwB,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACtC,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAASH,EAAOM,MAA5C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCL,mBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KAEMC,EAAeT,EAAUU,QAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAUL,KAE7D,OAAQF,GACN,KAAKP,EAAOe,SACVJ,EAAaK,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACxD,MACF,KAAKlB,EAAOoB,OACVT,EAAaK,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMH,OAASI,EAAMJ,UAMzDV,GACFO,EAAaU,UAGf,IAIML,EAAO,SAACM,GAEVd,EADED,IAAWe,EACHA,EAEAtB,EAAOM,OAUrB,OACE,sBAAKiB,UAAU,QAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,gBACpB,CAAE,wBAAyBrB,IAC7BsB,QAzBQ,WACdrB,GAAcD,IAoBV,qBASA,wBACEoB,KAAK,SACLD,UAAWE,IAAW,gBACpB,CAAE,wBAAyBlB,IAAWP,EAAOe,WAC/CW,QAAS,kBAAMV,EAAKhB,EAAOe,WAJ7B,iCASA,wBACES,KAAK,SACLD,UAAWE,IAAW,gBACpB,CAAE,wBAAyBlB,IAAWP,EAAOoB,SAC/CM,QAAS,kBAAMV,EAAKhB,EAAOoB,SAJ7B,4BASA,wBACEG,UAAWE,IAAW,gBACpB,CAAE,wBAAwC,IAAfhB,IAC7BkB,SAAU,SAAAC,GAAK,OAAIlB,EAAcmB,OAAOD,EAAME,OAAOC,SACrDA,MAAOtB,EAJT,SAOIuB,MAAMC,KAAK,CAAEnB,OAAQ,KAAM,SAACoB,EAAGC,GAAJ,OAAUA,EAAI,KAAGC,KAAI,SAAAC,GAAG,OACjD,wBAAQN,MAAOM,EAAf,kCAAiDA,IAAxBA,QAK/B,wBACEb,KAAK,SACLD,UAAU,gBACVG,QApDM,WACZrB,GAAa,GACbG,EAAUR,EAAOM,MACjBI,EAAc,IA8CV,sBASF,oBAAIa,UAAU,cAAd,SAEIZ,EAAayB,KAAI,SAACE,GAAD,OACf,oBAAef,UAAU,cAAzB,SACGe,GADMA,YCzGfC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAyBaC,EAtBO,WACpB,MAAkCrC,oBAAS,GAA3C,mBAAOsC,EAAP,KAAkBC,EAAlB,KAEA,OACE,sBAAKnB,UAAU,MAAf,UACE,oBAAIA,UAAU,cAAd,mBAECkB,GAAa,cAAC,EAAD,CAAMvC,UAAWqC,KAE7BE,GACA,wBACEjB,KAAK,SACLE,QAAS,kBAAMgB,GAAa,IAC5BnB,UAAU,mBAHZ,uBCxBRoB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.47e53d20.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './List.scss';\n\ntype Props = {\n  goodsList: string[];\n};\n\nenum SortBy {\n  Length = 'length',\n  Alphabet = 'alphabet',\n  None = '',\n}\n\nexport const List: React.FC<Props> = ({ goodsList }) => {\n  const [isReverse, setIsReverse] = useState(false);\n  const [sortBy, setSortBy] = useState(SortBy.None);\n  const [wordLength, setWordLength] = useState(1);\n\n  const newGoodsList = goodsList.filter(word => word.length >= wordLength);\n\n  switch (sortBy) {\n    case SortBy.Alphabet:\n      newGoodsList.sort((elem1, elem2) => elem1.localeCompare(elem2));\n      break;\n    case SortBy.Length:\n      newGoodsList.sort((elem1, elem2) => elem1.length - elem2.length);\n      break;\n    default:\n      break;\n  }\n\n  if (isReverse) {\n    newGoodsList.reverse();\n  }\n\n  const reverse = () => {\n    setIsReverse(!isReverse);\n  };\n\n  const sort = (sortType: SortBy) => {\n    if (sortBy !== sortType) {\n      setSortBy(sortType);\n    } else {\n      setSortBy(SortBy.None);\n    }\n  };\n\n  const reset = () => {\n    setIsReverse(false);\n    setSortBy(SortBy.None);\n    setWordLength(1);\n  };\n\n  return (\n    <div className=\"goods\">\n      <div className=\"goods__buttons\">\n        <button\n          type=\"button\"\n          className={classNames('goods__button',\n            { 'goods__button--active': isReverse })}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('goods__button',\n            { 'goods__button--active': sortBy === SortBy.Alphabet })}\n          onClick={() => sort(SortBy.Alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('goods__button',\n            { 'goods__button--active': sortBy === SortBy.Length })}\n          onClick={() => sort(SortBy.Length)}\n        >\n          Sort by length\n        </button>\n\n        <select\n          className={classNames('goods__button',\n            { 'goods__button--active': wordLength !== 1 })}\n          onChange={event => setWordLength(Number(event.target.value))}\n          value={wordLength}\n        >\n          {\n            Array.from({ length: 10 }, (_, i) => i + 1).map(num => (\n              <option value={num} key={num}>{`Word length >= ${num}`}</option>\n            ))\n          }\n        </select>\n\n        <button\n          type=\"button\"\n          className=\"goods__button\"\n          onClick={reset}\n        >\n          Reset\n        </button>\n      </div>\n\n      <ul className=\"goods__list\">\n        {\n          newGoodsList.map((item) => (\n            <li key={item} className=\"goods__item\">\n              {item}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { List } from './components/List/List';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst App: React.FC = () => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__header\">Goods</h1>\n\n      {isVisible && <List goodsList={goodsFromServer} />}\n\n      {!isVisible && (\n        <button\n          type=\"button\"\n          onClick={() => setIsVisible(true)}\n          className=\"app__show-button\"\n        >\n          Start\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}